// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.epam.hack.choosebyspeed.domain;

import com.epam.hack.choosebyspeed.domain.Customer;
import com.epam.hack.choosebyspeed.domain.Delivery;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Delivery_Roo_Finder {
    
    public static Long Delivery.countFindDeliverysByCustomer(Customer customer) {
        if (customer == null) throw new IllegalArgumentException("The customer argument is required");
        EntityManager em = Delivery.entityManager();
        TypedQuery q = em.createQuery("SELECT COUNT(o) FROM Delivery AS o WHERE o.customer = :customer", Long.class);
        q.setParameter("customer", customer);
        return ((Long) q.getSingleResult());
    }
    
    public static TypedQuery<Delivery> Delivery.findDeliverysByCustomer(Customer customer) {
        if (customer == null) throw new IllegalArgumentException("The customer argument is required");
        EntityManager em = Delivery.entityManager();
        TypedQuery<Delivery> q = em.createQuery("SELECT o FROM Delivery AS o WHERE o.customer = :customer", Delivery.class);
        q.setParameter("customer", customer);
        return q;
    }
    
    public static TypedQuery<Delivery> Delivery.findDeliverysByCustomer(Customer customer, String sortFieldName, String sortOrder) {
        if (customer == null) throw new IllegalArgumentException("The customer argument is required");
        EntityManager em = Delivery.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Delivery AS o WHERE o.customer = :customer");
        if (fieldNames4OrderClauseFilter.contains(sortFieldName)) {
            queryBuilder.append(" ORDER BY ").append(sortFieldName);
            if ("ASC".equalsIgnoreCase(sortOrder) || "DESC".equalsIgnoreCase(sortOrder)) {
                queryBuilder.append(" ").append(sortOrder);
            }
        }
        TypedQuery<Delivery> q = em.createQuery(queryBuilder.toString(), Delivery.class);
        q.setParameter("customer", customer);
        return q;
    }
    
}
